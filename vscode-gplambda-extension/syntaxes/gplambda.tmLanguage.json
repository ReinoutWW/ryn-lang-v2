{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "GP-Î»",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.gplambda",
          "match": "//.*$"
        },
        {
          "name": "comment.block.gplambda",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.gplambda",
          "match": "\\b(if|else|return|assert)\\b"
        },
        {
          "name": "keyword.declaration.gplambda",
          "match": "\\b(func|let)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.gplambda",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.gplambda",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.gplambda",
              "match": "\\\\(n|r|t|\\\\|\")"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.gplambda",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.gplambda",
          "match": "\\b\\d+\\.\\d+\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.gplambda",
          "match": "\\b(Int|String|Bool|Void)\\b"
        },
        {
          "name": "support.type.function.gplambda",
          "match": "\\bFunc\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.gplambda",
          "match": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.function.gplambda"
            },
            "2": {
              "name": "entity.name.function.gplambda"
            }
          }
        },
        {
          "name": "support.function.builtin.gplambda",
          "match": "\\b(println|readLine|toString)\\b"
        },
        {
          "name": "entity.name.function.call.gplambda",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.gplambda"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.gplambda",
          "match": "(->|=>)"
        },
        {
          "name": "keyword.operator.comparison.gplambda",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.gplambda",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.gplambda",
          "match": "(\\+|\\-|\\*|\\/|%)"
        },
        {
          "name": "keyword.operator.assignment.gplambda",
          "match": "="
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.gplambda",
          "match": ","
        },
        {
          "name": "punctuation.separator.colon.gplambda",
          "match": ":"
        },
        {
          "name": "punctuation.terminator.statement.gplambda",
          "match": ";"
        },
        {
          "name": "punctuation.section.braces.gplambda",
          "match": "[{}]"
        },
        {
          "name": "punctuation.section.brackets.gplambda",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.section.parens.gplambda",
          "match": "[()]"
        },
        {
          "name": "punctuation.accessor.gplambda",
          "match": "\\."
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.declaration.gplambda",
          "match": "\\b(let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.variable.gplambda"
            },
            "2": {
              "name": "variable.other.gplambda"
            }
          }
        },
        {
          "name": "variable.parameter.gplambda",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)\\s*([A-Z][a-zA-Z0-9_<>,\\s]*)",
          "captures": {
            "1": {
              "name": "variable.parameter.gplambda"
            },
            "2": {
              "name": "punctuation.separator.colon.gplambda"
            },
            "3": {
              "name": "support.type.gplambda"
            }
          }
        },
        {
          "name": "variable.other.gplambda",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.gplambda"
}