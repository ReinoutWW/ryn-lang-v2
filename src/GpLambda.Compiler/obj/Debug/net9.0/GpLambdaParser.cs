//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/c/Users/ReinoutWijnholds/code/ryn-lang-v2/src/GpLambda.Compiler/Grammar/GpLambda.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GpLambda.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GpLambdaParser : Parser {
	public const int
		T__0=1, FUNC=2, LET=3, IF=4, ELSE=5, RETURN=6, ASSERT=7, TRUE=8, FALSE=9, 
		INT_TYPE=10, STRING_TYPE=11, BOOL_TYPE=12, VOID_TYPE=13, FUNC_TYPE=14, 
		ARROW=15, LAMBDA_ARROW=16, EQ=17, NEQ=18, LT=19, GT=20, LE=21, GE=22, 
		AND=23, OR=24, PLUS=25, MINUS=26, MULT=27, DIV=28, MOD=29, NOT=30, ASSIGN=31, 
		LPAREN=32, RPAREN=33, LBRACE=34, RBRACE=35, SEMI=36, COMMA=37, COLON=38, 
		ID=39, INT=40, STRING=41, WS=42, COMMENT=43, BLOCK_COMMENT=44;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_functionDecl = 2, RULE_paramList = 3, 
		RULE_param = 4, RULE_returnType = 5, RULE_type = 6, RULE_typeList = 7, 
		RULE_block = 8, RULE_statement = 9, RULE_varDecl = 10, RULE_assignStmt = 11, 
		RULE_ifStmt = 12, RULE_returnStmt = 13, RULE_assertStmt = 14, RULE_exprStmt = 15, 
		RULE_expr = 16, RULE_primary = 17, RULE_argList = 18;
	public static readonly string[] ruleNames = {
		"program", "declaration", "functionDecl", "paramList", "param", "returnType", 
		"type", "typeList", "block", "statement", "varDecl", "assignStmt", "ifStmt", 
		"returnStmt", "assertStmt", "exprStmt", "expr", "primary", "argList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'func'", "'let'", "'if'", "'else'", "'return'", "'assert'", 
		"'true'", "'false'", "'Int'", "'String'", "'Bool'", "'Void'", "'Func'", 
		"'->'", "'=>'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", 
		"'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'('", "')'", 
		"'{'", "'}'", "';'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "FUNC", "LET", "IF", "ELSE", "RETURN", "ASSERT", "TRUE", "FALSE", 
		"INT_TYPE", "STRING_TYPE", "BOOL_TYPE", "VOID_TYPE", "FUNC_TYPE", "ARROW", 
		"LAMBDA_ARROW", "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "PLUS", 
		"MINUS", "MULT", "DIV", "MOD", "NOT", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "SEMI", "COMMA", "COLON", "ID", "INT", "STRING", "WS", "COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GpLambda.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GpLambdaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GpLambdaParser.Eof, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << LET) | (1L << IF) | (1L << RETURN) | (1L << ASSERT) | (1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << NOT) | (1L << LPAREN) | (1L << LBRACE) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
				{
				{
				State = 38; declaration();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 44; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			State = 48;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FUNC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; functionDecl();
				}
				break;
			case LET:
			case IF:
			case RETURN:
			case ASSERT:
			case TRUE:
			case FALSE:
			case MINUS:
			case NOT:
			case LPAREN:
			case LBRACE:
			case ID:
			case INT:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GpLambdaParser.ID, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(FUNC);
			State = 51; Match(ID);
			State = 52; Match(LPAREN);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 53; paramList();
				}
			}

			State = 56; Match(RPAREN);
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARROW) {
				{
				State = 57; returnType();
				}
			}

			State = 60; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; param();
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 63; Match(COMMA);
				State = 64; param();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GpLambdaParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(ID);
			State = 71; Match(COLON);
			State = 72; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(ARROW);
			State = 75; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveTypeContext : TypeContext {
		public PrimitiveTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : TypeContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			State = 88;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_TYPE:
				_localctx = new PrimitiveTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(INT_TYPE);
				}
				break;
			case STRING_TYPE:
				_localctx = new PrimitiveTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; Match(STRING_TYPE);
				}
				break;
			case BOOL_TYPE:
				_localctx = new PrimitiveTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 79; Match(BOOL_TYPE);
				}
				break;
			case VOID_TYPE:
				_localctx = new PrimitiveTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; Match(VOID_TYPE);
				}
				break;
			case FUNC_TYPE:
				_localctx = new FunctionTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 81; Match(FUNC_TYPE);
				State = 82; Match(LT);
				State = 83; typeList();
				State = 84; Match(COMMA);
				State = 85; type();
				State = 86; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; type();
			State = 95;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 91; Match(COMMA);
					State = 92; type();
					}
					} 
				}
				State = 97;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(LBRACE);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET) | (1L << IF) | (1L << RETURN) | (1L << ASSERT) | (1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << NOT) | (1L << LPAREN) | (1L << LBRACE) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
				{
				{
				State = 99; statement();
				}
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 105; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public AssignStmtContext assignStmt() {
			return GetRuleContext<AssignStmtContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public AssertStmtContext assertStmt() {
			return GetRuleContext<AssertStmtContext>(0);
		}
		public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; varDecl();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; assignStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; ifStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; returnStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111; assertStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 112; exprStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 113; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GpLambdaParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_varDecl);
		int _la;
		try {
			State = 132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; Match(LET);
				State = 117; Match(ID);
				State = 118; Match(COLON);
				State = 119; type();
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASSIGN) {
					{
					State = 120; Match(ASSIGN);
					State = 121; expr(0);
					}
				}

				State = 124; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; Match(LET);
				State = 127; Match(ID);
				State = 128; Match(ASSIGN);
				State = 129; expr(0);
				State = 130; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmtContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GpLambdaParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmtContext assignStmt() {
		AssignStmtContext _localctx = new AssignStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_assignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(ID);
			State = 135; Match(ASSIGN);
			State = 136; expr(0);
			State = 137; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(IF);
			State = 140; Match(LPAREN);
			State = 141; expr(0);
			State = 142; Match(RPAREN);
			State = 143; block();
			State = 146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 144; Match(ELSE);
				State = 145; block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(RETURN);
			State = 150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << NOT) | (1L << LPAREN) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
				{
				State = 149; expr(0);
				}
			}

			State = 152; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(GpLambdaParser.STRING, 0); }
		public AssertStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStmtContext assertStmt() {
		AssertStmtContext _localctx = new AssertStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_assertStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(ASSERT);
			State = 155; Match(LPAREN);
			State = 156; expr(0);
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 157; Match(COMMA);
				State = 158; Match(STRING);
				}
			}

			State = 161; Match(RPAREN);
			State = 162; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; expr(0);
			State = 165; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprContext : ExprContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GpLambdaParser.ID, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public MethodCallExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public CallExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplicativeExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AdditiveExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalAndExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalOrExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public LambdaExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				_localctx = new PrimaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 168; primary();
				}
				break;

			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 169;
				((UnaryExprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==MINUS || _la==NOT) ) {
					((UnaryExprContext)_localctx).op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 170; expr(8);
				}
				break;

			case 3:
				{
				_localctx = new LambdaExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 171; Match(LPAREN);
				State = 173;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 172; paramList();
					}
				}

				State = 175; Match(RPAREN);
				State = 176; Match(LAMBDA_ARROW);
				State = 179;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case TRUE:
				case FALSE:
				case MINUS:
				case NOT:
				case LPAREN:
				case ID:
				case INT:
				case STRING:
					{
					State = 177; expr(0);
					}
					break;
				case LBRACE:
					{
					State = 178; block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 217;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 215;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 183;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 184;
						((MultiplicativeExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultiplicativeExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 185; expr(8);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 186;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 187;
						((AdditiveExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 188; expr(7);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 189;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 190;
						((RelationalExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LE) | (1L << GE))) != 0)) ) {
							((RelationalExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 191; expr(6);
						}
						break;

					case 4:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 192;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 193;
						((EqualityExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualityExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 194; expr(5);
						}
						break;

					case 5:
						{
						_localctx = new LogicalAndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 195;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 196; Match(AND);
						State = 197; expr(4);
						}
						break;

					case 6:
						{
						_localctx = new LogicalOrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 198;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 199; Match(OR);
						State = 200; expr(3);
						}
						break;

					case 7:
						{
						_localctx = new MethodCallExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 201;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 202; Match(T__0);
						State = 203; Match(ID);
						State = 204; Match(LPAREN);
						State = 206;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << NOT) | (1L << LPAREN) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
							{
							State = 205; argList();
							}
						}

						State = 208; Match(RPAREN);
						}
						break;

					case 8:
						{
						_localctx = new CallExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 209;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 210; Match(LPAREN);
						State = 212;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << NOT) | (1L << LPAREN) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
							{
							State = 211; argList();
							}
						}

						State = 214; Match(RPAREN);
						}
						break;
					}
					} 
				}
				State = 219;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntLiteralContext : PrimaryContext {
		public ITerminalNode INT() { return GetToken(GpLambdaParser.INT, 0); }
		public IntLiteralContext(PrimaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : PrimaryContext {
		public ITerminalNode STRING() { return GetToken(GpLambdaParser.STRING, 0); }
		public StringLiteralContext(PrimaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLiteralContext : PrimaryContext {
		public BoolLiteralContext(PrimaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExprContext : PrimaryContext {
		public ITerminalNode ID() { return GetToken(GpLambdaParser.ID, 0); }
		public VarExprContext(PrimaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : PrimaryContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(PrimaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_primary);
		try {
			State = 229;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				_localctx = new IntLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; Match(INT);
				}
				break;
			case STRING:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; Match(STRING);
				}
				break;
			case TRUE:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 222; Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; Match(FALSE);
				}
				break;
			case ID:
				_localctx = new VarExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 224; Match(ID);
				}
				break;
			case LPAREN:
				_localctx = new ParenExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 225; Match(LPAREN);
				State = 226; expr(0);
				State = 227; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGpLambdaVisitor<TResult> typedVisitor = visitor as IGpLambdaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; expr(0);
			State = 236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 232; Match(COMMA);
				State = 233; expr(0);
				}
				}
				State = 238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 7);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 10);

		case 7: return Precpred(_ctx, 9);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3.\xF2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\a\x2*\n"+
		"\x2\f\x2\xE\x2-\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x33\n\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x5\x4\x39\n\x4\x3\x4\x3\x4\x5\x4=\n\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\a\x5\x44\n\x5\f\x5\xE\x5G\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b[\n\b\x3\t\x3\t\x3\t\a\t`\n\t\f\t\xE\t\x63\v\t\x3\n\x3\n\a\ng\n\n\f"+
		"\n\xE\nj\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vu\n\v\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f}\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x5\f\x87\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x95\n\xE\x3\xF\x3\xF\x5\xF\x99\n\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xA2\n\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\xB0\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xB6\n\x12\x5\x12"+
		"\xB8\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xD1\n\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x5\x12\xD7\n\x12\x3\x12\a\x12\xDA\n\x12\f\x12\xE\x12\xDD\v\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\xE8\n\x13\x3\x14\x3\x14\x3\x14\a\x14\xED\n\x14\f\x14\xE\x14\xF0\v\x14"+
		"\x3\x14\x2\x2\x3\"\x15\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\a\x4"+
		"\x2\x1C\x1C  \x3\x2\x1D\x1F\x3\x2\x1B\x1C\x3\x2\x15\x18\x3\x2\x13\x14"+
		"\x108\x2+\x3\x2\x2\x2\x4\x32\x3\x2\x2\x2\x6\x34\x3\x2\x2\x2\b@\x3\x2\x2"+
		"\x2\nH\x3\x2\x2\x2\fL\x3\x2\x2\x2\xEZ\x3\x2\x2\x2\x10\\\x3\x2\x2\x2\x12"+
		"\x64\x3\x2\x2\x2\x14t\x3\x2\x2\x2\x16\x86\x3\x2\x2\x2\x18\x88\x3\x2\x2"+
		"\x2\x1A\x8D\x3\x2\x2\x2\x1C\x96\x3\x2\x2\x2\x1E\x9C\x3\x2\x2\x2 \xA6\x3"+
		"\x2\x2\x2\"\xB7\x3\x2\x2\x2$\xE7\x3\x2\x2\x2&\xE9\x3\x2\x2\x2(*\x5\x4"+
		"\x3\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,.\x3\x2"+
		"\x2\x2-+\x3\x2\x2\x2./\a\x2\x2\x3/\x3\x3\x2\x2\x2\x30\x33\x5\x6\x4\x2"+
		"\x31\x33\x5\x14\v\x2\x32\x30\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x5\x3"+
		"\x2\x2\x2\x34\x35\a\x4\x2\x2\x35\x36\a)\x2\x2\x36\x38\a\"\x2\x2\x37\x39"+
		"\x5\b\x5\x2\x38\x37\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\x3\x2\x2\x2:"+
		"<\a#\x2\x2;=\x5\f\a\x2<;\x3\x2\x2\x2<=\x3\x2\x2\x2=>\x3\x2\x2\x2>?\x5"+
		"\x12\n\x2?\a\x3\x2\x2\x2@\x45\x5\n\x6\x2\x41\x42\a\'\x2\x2\x42\x44\x5"+
		"\n\x6\x2\x43\x41\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45"+
		"\x46\x3\x2\x2\x2\x46\t\x3\x2\x2\x2G\x45\x3\x2\x2\x2HI\a)\x2\x2IJ\a(\x2"+
		"\x2JK\x5\xE\b\x2K\v\x3\x2\x2\x2LM\a\x11\x2\x2MN\x5\xE\b\x2N\r\x3\x2\x2"+
		"\x2O[\a\f\x2\x2P[\a\r\x2\x2Q[\a\xE\x2\x2R[\a\xF\x2\x2ST\a\x10\x2\x2TU"+
		"\a\x15\x2\x2UV\x5\x10\t\x2VW\a\'\x2\x2WX\x5\xE\b\x2XY\a\x16\x2\x2Y[\x3"+
		"\x2\x2\x2ZO\x3\x2\x2\x2ZP\x3\x2\x2\x2ZQ\x3\x2\x2\x2ZR\x3\x2\x2\x2ZS\x3"+
		"\x2\x2\x2[\xF\x3\x2\x2\x2\\\x61\x5\xE\b\x2]^\a\'\x2\x2^`\x5\xE\b\x2_]"+
		"\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62"+
		"\x11\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x64h\a$\x2\x2\x65g\x5\x14\v\x2\x66"+
		"\x65\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2ik\x3\x2"+
		"\x2\x2jh\x3\x2\x2\x2kl\a%\x2\x2l\x13\x3\x2\x2\x2mu\x5\x16\f\x2nu\x5\x18"+
		"\r\x2ou\x5\x1A\xE\x2pu\x5\x1C\xF\x2qu\x5\x1E\x10\x2ru\x5 \x11\x2su\x5"+
		"\x12\n\x2tm\x3\x2\x2\x2tn\x3\x2\x2\x2to\x3\x2\x2\x2tp\x3\x2\x2\x2tq\x3"+
		"\x2\x2\x2tr\x3\x2\x2\x2ts\x3\x2\x2\x2u\x15\x3\x2\x2\x2vw\a\x5\x2\x2wx"+
		"\a)\x2\x2xy\a(\x2\x2y|\x5\xE\b\x2z{\a!\x2\x2{}\x5\"\x12\x2|z\x3\x2\x2"+
		"\x2|}\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\a&\x2\x2\x7F\x87\x3\x2\x2\x2\x80"+
		"\x81\a\x5\x2\x2\x81\x82\a)\x2\x2\x82\x83\a!\x2\x2\x83\x84\x5\"\x12\x2"+
		"\x84\x85\a&\x2\x2\x85\x87\x3\x2\x2\x2\x86v\x3\x2\x2\x2\x86\x80\x3\x2\x2"+
		"\x2\x87\x17\x3\x2\x2\x2\x88\x89\a)\x2\x2\x89\x8A\a!\x2\x2\x8A\x8B\x5\""+
		"\x12\x2\x8B\x8C\a&\x2\x2\x8C\x19\x3\x2\x2\x2\x8D\x8E\a\x6\x2\x2\x8E\x8F"+
		"\a\"\x2\x2\x8F\x90\x5\"\x12\x2\x90\x91\a#\x2\x2\x91\x94\x5\x12\n\x2\x92"+
		"\x93\a\a\x2\x2\x93\x95\x5\x12\n\x2\x94\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2"+
		"\x2\x95\x1B\x3\x2\x2\x2\x96\x98\a\b\x2\x2\x97\x99\x5\"\x12\x2\x98\x97"+
		"\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9B\a&\x2\x2"+
		"\x9B\x1D\x3\x2\x2\x2\x9C\x9D\a\t\x2\x2\x9D\x9E\a\"\x2\x2\x9E\xA1\x5\""+
		"\x12\x2\x9F\xA0\a\'\x2\x2\xA0\xA2\a+\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2"+
		"\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\a#\x2\x2\xA4\xA5\a&\x2\x2\xA5"+
		"\x1F\x3\x2\x2\x2\xA6\xA7\x5\"\x12\x2\xA7\xA8\a&\x2\x2\xA8!\x3\x2\x2\x2"+
		"\xA9\xAA\b\x12\x1\x2\xAA\xB8\x5$\x13\x2\xAB\xAC\t\x2\x2\x2\xAC\xB8\x5"+
		"\"\x12\n\xAD\xAF\a\"\x2\x2\xAE\xB0\x5\b\x5\x2\xAF\xAE\x3\x2\x2\x2\xAF"+
		"\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\a#\x2\x2\xB2\xB5\a\x12\x2"+
		"\x2\xB3\xB6\x5\"\x12\x2\xB4\xB6\x5\x12\n\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4"+
		"\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xA9\x3\x2\x2\x2\xB7\xAB\x3\x2\x2"+
		"\x2\xB7\xAD\x3\x2\x2\x2\xB8\xDB\x3\x2\x2\x2\xB9\xBA\f\t\x2\x2\xBA\xBB"+
		"\t\x3\x2\x2\xBB\xDA\x5\"\x12\n\xBC\xBD\f\b\x2\x2\xBD\xBE\t\x4\x2\x2\xBE"+
		"\xDA\x5\"\x12\t\xBF\xC0\f\a\x2\x2\xC0\xC1\t\x5\x2\x2\xC1\xDA\x5\"\x12"+
		"\b\xC2\xC3\f\x6\x2\x2\xC3\xC4\t\x6\x2\x2\xC4\xDA\x5\"\x12\a\xC5\xC6\f"+
		"\x5\x2\x2\xC6\xC7\a\x19\x2\x2\xC7\xDA\x5\"\x12\x6\xC8\xC9\f\x4\x2\x2\xC9"+
		"\xCA\a\x1A\x2\x2\xCA\xDA\x5\"\x12\x5\xCB\xCC\f\f\x2\x2\xCC\xCD\a\x3\x2"+
		"\x2\xCD\xCE\a)\x2\x2\xCE\xD0\a\"\x2\x2\xCF\xD1\x5&\x14\x2\xD0\xCF\x3\x2"+
		"\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xDA\a#\x2\x2\xD3\xD4"+
		"\f\v\x2\x2\xD4\xD6\a\"\x2\x2\xD5\xD7\x5&\x14\x2\xD6\xD5\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\a#\x2\x2\xD9\xB9\x3\x2\x2"+
		"\x2\xD9\xBC\x3\x2\x2\x2\xD9\xBF\x3\x2\x2\x2\xD9\xC2\x3\x2\x2\x2\xD9\xC5"+
		"\x3\x2\x2\x2\xD9\xC8\x3\x2\x2\x2\xD9\xCB\x3\x2\x2\x2\xD9\xD3\x3\x2\x2"+
		"\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC#\x3"+
		"\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xE8\a*\x2\x2\xDF\xE8\a+\x2\x2\xE0\xE8"+
		"\a\n\x2\x2\xE1\xE8\a\v\x2\x2\xE2\xE8\a)\x2\x2\xE3\xE4\a\"\x2\x2\xE4\xE5"+
		"\x5\"\x12\x2\xE5\xE6\a#\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xDE\x3\x2\x2\x2"+
		"\xE7\xDF\x3\x2\x2\x2\xE7\xE0\x3\x2\x2\x2\xE7\xE1\x3\x2\x2\x2\xE7\xE2\x3"+
		"\x2\x2\x2\xE7\xE3\x3\x2\x2\x2\xE8%\x3\x2\x2\x2\xE9\xEE\x5\"\x12\x2\xEA"+
		"\xEB\a\'\x2\x2\xEB\xED\x5\"\x12\x2\xEC\xEA\x3\x2\x2\x2\xED\xF0\x3\x2\x2"+
		"\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\'\x3\x2\x2\x2\xF0\xEE"+
		"\x3\x2\x2\x2\x19+\x32\x38<\x45Z\x61ht|\x86\x94\x98\xA1\xAF\xB5\xB7\xD0"+
		"\xD6\xD9\xDB\xE7\xEE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace GpLambda.Compiler.Grammar
