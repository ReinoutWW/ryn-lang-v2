//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/c/Users/ReinoutWijnholds/code/ryn-lang-v2/src/GpLambda.Compiler/Grammar/GpLambda.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GpLambda.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GpLambdaLexer : Lexer {
	public const int
		T__0=1, FUNC=2, LET=3, IF=4, ELSE=5, RETURN=6, ASSERT=7, TRUE=8, FALSE=9, 
		INT_TYPE=10, STRING_TYPE=11, BOOL_TYPE=12, VOID_TYPE=13, FUNC_TYPE=14, 
		ARROW=15, LAMBDA_ARROW=16, EQ=17, NEQ=18, LT=19, GT=20, LE=21, GE=22, 
		AND=23, OR=24, PLUS=25, MINUS=26, MULT=27, DIV=28, MOD=29, NOT=30, ASSIGN=31, 
		LPAREN=32, RPAREN=33, LBRACE=34, RBRACE=35, SEMI=36, COMMA=37, COLON=38, 
		ID=39, INT=40, STRING=41, WS=42, COMMENT=43, BLOCK_COMMENT=44;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "FUNC", "LET", "IF", "ELSE", "RETURN", "ASSERT", "TRUE", "FALSE", 
		"INT_TYPE", "STRING_TYPE", "BOOL_TYPE", "VOID_TYPE", "FUNC_TYPE", "ARROW", 
		"LAMBDA_ARROW", "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "PLUS", 
		"MINUS", "MULT", "DIV", "MOD", "NOT", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "SEMI", "COMMA", "COLON", "ID", "INT", "STRING", "WS", "COMMENT", 
		"BLOCK_COMMENT"
	};


	public GpLambdaLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'func'", "'let'", "'if'", "'else'", "'return'", "'assert'", 
		"'true'", "'false'", "'Int'", "'String'", "'Bool'", "'Void'", "'Func'", 
		"'->'", "'=>'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", 
		"'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'('", "')'", 
		"'{'", "'}'", "';'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "FUNC", "LET", "IF", "ELSE", "RETURN", "ASSERT", "TRUE", "FALSE", 
		"INT_TYPE", "STRING_TYPE", "BOOL_TYPE", "VOID_TYPE", "FUNC_TYPE", "ARROW", 
		"LAMBDA_ARROW", "EQ", "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "PLUS", 
		"MINUS", "MULT", "DIV", "MOD", "NOT", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "SEMI", "COMMA", "COLON", "ID", "INT", "STRING", "WS", "COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GpLambda.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2.\x110\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\""+
		"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\a(\xDC\n(\f(\xE"+
		"(\xDF\v(\x3)\x6)\xE2\n)\r)\xE)\xE3\x3*\x3*\x3*\x3*\a*\xEA\n*\f*\xE*\xED"+
		"\v*\x3*\x3*\x3+\x6+\xF2\n+\r+\xE+\xF3\x3+\x3+\x3,\x3,\x3,\x3,\a,\xFC\n"+
		",\f,\xE,\xFF\v,\x3,\x3,\x3-\x3-\x3-\x3-\a-\x107\n-\f-\xE-\x10A\v-\x3-"+
		"\x3-\x3-\x3-\x3-\x3\x108\x2\x2.\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2"+
		"\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2"+
		"\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2"+
		"\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2"+
		"\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O"+
		"\x2)Q\x2*S\x2+U\x2,W\x2-Y\x2.\x3\x2\b\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32"+
		";\x43\\\x61\x61\x63|\x3\x2\x32;\x6\x2\f\f\xF\xF$$^^\x5\x2\v\f\xF\xF\""+
		"\"\x4\x2\f\f\xF\xF\x116\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2"+
		"\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2"+
		"\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17"+
		"\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2"+
		"\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2"+
		"\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3"+
		"\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2"+
		"\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2"+
		"?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2"+
		"\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3"+
		"\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2"+
		"\x2\x2Y\x3\x2\x2\x2\x3[\x3\x2\x2\x2\x5]\x3\x2\x2\x2\a\x62\x3\x2\x2\x2"+
		"\t\x66\x3\x2\x2\x2\vi\x3\x2\x2\x2\rn\x3\x2\x2\x2\xFu\x3\x2\x2\x2\x11|"+
		"\x3\x2\x2\x2\x13\x81\x3\x2\x2\x2\x15\x87\x3\x2\x2\x2\x17\x8B\x3\x2\x2"+
		"\x2\x19\x92\x3\x2\x2\x2\x1B\x97\x3\x2\x2\x2\x1D\x9C\x3\x2\x2\x2\x1F\xA1"+
		"\x3\x2\x2\x2!\xA4\x3\x2\x2\x2#\xA7\x3\x2\x2\x2%\xAA\x3\x2\x2\x2\'\xAD"+
		"\x3\x2\x2\x2)\xAF\x3\x2\x2\x2+\xB1\x3\x2\x2\x2-\xB4\x3\x2\x2\x2/\xB7\x3"+
		"\x2\x2\x2\x31\xBA\x3\x2\x2\x2\x33\xBD\x3\x2\x2\x2\x35\xBF\x3\x2\x2\x2"+
		"\x37\xC1\x3\x2\x2\x2\x39\xC3\x3\x2\x2\x2;\xC5\x3\x2\x2\x2=\xC7\x3\x2\x2"+
		"\x2?\xC9\x3\x2\x2\x2\x41\xCB\x3\x2\x2\x2\x43\xCD\x3\x2\x2\x2\x45\xCF\x3"+
		"\x2\x2\x2G\xD1\x3\x2\x2\x2I\xD3\x3\x2\x2\x2K\xD5\x3\x2\x2\x2M\xD7\x3\x2"+
		"\x2\x2O\xD9\x3\x2\x2\x2Q\xE1\x3\x2\x2\x2S\xE5\x3\x2\x2\x2U\xF1\x3\x2\x2"+
		"\x2W\xF7\x3\x2\x2\x2Y\x102\x3\x2\x2\x2[\\\a\x30\x2\x2\\\x4\x3\x2\x2\x2"+
		"]^\ah\x2\x2^_\aw\x2\x2_`\ap\x2\x2`\x61\a\x65\x2\x2\x61\x6\x3\x2\x2\x2"+
		"\x62\x63\an\x2\x2\x63\x64\ag\x2\x2\x64\x65\av\x2\x2\x65\b\x3\x2\x2\x2"+
		"\x66g\ak\x2\x2gh\ah\x2\x2h\n\x3\x2\x2\x2ij\ag\x2\x2jk\an\x2\x2kl\au\x2"+
		"\x2lm\ag\x2\x2m\f\x3\x2\x2\x2no\at\x2\x2op\ag\x2\x2pq\av\x2\x2qr\aw\x2"+
		"\x2rs\at\x2\x2st\ap\x2\x2t\xE\x3\x2\x2\x2uv\a\x63\x2\x2vw\au\x2\x2wx\a"+
		"u\x2\x2xy\ag\x2\x2yz\at\x2\x2z{\av\x2\x2{\x10\x3\x2\x2\x2|}\av\x2\x2}"+
		"~\at\x2\x2~\x7F\aw\x2\x2\x7F\x80\ag\x2\x2\x80\x12\x3\x2\x2\x2\x81\x82"+
		"\ah\x2\x2\x82\x83\a\x63\x2\x2\x83\x84\an\x2\x2\x84\x85\au\x2\x2\x85\x86"+
		"\ag\x2\x2\x86\x14\x3\x2\x2\x2\x87\x88\aK\x2\x2\x88\x89\ap\x2\x2\x89\x8A"+
		"\av\x2\x2\x8A\x16\x3\x2\x2\x2\x8B\x8C\aU\x2\x2\x8C\x8D\av\x2\x2\x8D\x8E"+
		"\at\x2\x2\x8E\x8F\ak\x2\x2\x8F\x90\ap\x2\x2\x90\x91\ai\x2\x2\x91\x18\x3"+
		"\x2\x2\x2\x92\x93\a\x44\x2\x2\x93\x94\aq\x2\x2\x94\x95\aq\x2\x2\x95\x96"+
		"\an\x2\x2\x96\x1A\x3\x2\x2\x2\x97\x98\aX\x2\x2\x98\x99\aq\x2\x2\x99\x9A"+
		"\ak\x2\x2\x9A\x9B\a\x66\x2\x2\x9B\x1C\x3\x2\x2\x2\x9C\x9D\aH\x2\x2\x9D"+
		"\x9E\aw\x2\x2\x9E\x9F\ap\x2\x2\x9F\xA0\a\x65\x2\x2\xA0\x1E\x3\x2\x2\x2"+
		"\xA1\xA2\a/\x2\x2\xA2\xA3\a@\x2\x2\xA3 \x3\x2\x2\x2\xA4\xA5\a?\x2\x2\xA5"+
		"\xA6\a@\x2\x2\xA6\"\x3\x2\x2\x2\xA7\xA8\a?\x2\x2\xA8\xA9\a?\x2\x2\xA9"+
		"$\x3\x2\x2\x2\xAA\xAB\a#\x2\x2\xAB\xAC\a?\x2\x2\xAC&\x3\x2\x2\x2\xAD\xAE"+
		"\a>\x2\x2\xAE(\x3\x2\x2\x2\xAF\xB0\a@\x2\x2\xB0*\x3\x2\x2\x2\xB1\xB2\a"+
		">\x2\x2\xB2\xB3\a?\x2\x2\xB3,\x3\x2\x2\x2\xB4\xB5\a@\x2\x2\xB5\xB6\a?"+
		"\x2\x2\xB6.\x3\x2\x2\x2\xB7\xB8\a(\x2\x2\xB8\xB9\a(\x2\x2\xB9\x30\x3\x2"+
		"\x2\x2\xBA\xBB\a~\x2\x2\xBB\xBC\a~\x2\x2\xBC\x32\x3\x2\x2\x2\xBD\xBE\a"+
		"-\x2\x2\xBE\x34\x3\x2\x2\x2\xBF\xC0\a/\x2\x2\xC0\x36\x3\x2\x2\x2\xC1\xC2"+
		"\a,\x2\x2\xC2\x38\x3\x2\x2\x2\xC3\xC4\a\x31\x2\x2\xC4:\x3\x2\x2\x2\xC5"+
		"\xC6\a\'\x2\x2\xC6<\x3\x2\x2\x2\xC7\xC8\a#\x2\x2\xC8>\x3\x2\x2\x2\xC9"+
		"\xCA\a?\x2\x2\xCA@\x3\x2\x2\x2\xCB\xCC\a*\x2\x2\xCC\x42\x3\x2\x2\x2\xCD"+
		"\xCE\a+\x2\x2\xCE\x44\x3\x2\x2\x2\xCF\xD0\a}\x2\x2\xD0\x46\x3\x2\x2\x2"+
		"\xD1\xD2\a\x7F\x2\x2\xD2H\x3\x2\x2\x2\xD3\xD4\a=\x2\x2\xD4J\x3\x2\x2\x2"+
		"\xD5\xD6\a.\x2\x2\xD6L\x3\x2\x2\x2\xD7\xD8\a<\x2\x2\xD8N\x3\x2\x2\x2\xD9"+
		"\xDD\t\x2\x2\x2\xDA\xDC\t\x3\x2\x2\xDB\xDA\x3\x2\x2\x2\xDC\xDF\x3\x2\x2"+
		"\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDEP\x3\x2\x2\x2\xDF\xDD\x3"+
		"\x2\x2\x2\xE0\xE2\t\x4\x2\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3"+
		"\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4R\x3\x2\x2\x2\xE5\xEB\a$\x2\x2"+
		"\xE6\xEA\n\x5\x2\x2\xE7\xE8\a^\x2\x2\xE8\xEA\v\x2\x2\x2\xE9\xE6\x3\x2"+
		"\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB"+
		"\xEC\x3\x2\x2\x2\xEC\xEE\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xEF\a$\x2"+
		"\x2\xEFT\x3\x2\x2\x2\xF0\xF2\t\x6\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF3\x3"+
		"\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2"+
		"\xF5\xF6\b+\x2\x2\xF6V\x3\x2\x2\x2\xF7\xF8\a\x31\x2\x2\xF8\xF9\a\x31\x2"+
		"\x2\xF9\xFD\x3\x2\x2\x2\xFA\xFC\n\a\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFF"+
		"\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100\x3\x2\x2"+
		"\x2\xFF\xFD\x3\x2\x2\x2\x100\x101\b,\x2\x2\x101X\x3\x2\x2\x2\x102\x103"+
		"\a\x31\x2\x2\x103\x104\a,\x2\x2\x104\x108\x3\x2\x2\x2\x105\x107\v\x2\x2"+
		"\x2\x106\x105\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2"+
		"\x108\x106\x3\x2\x2\x2\x109\x10B\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B"+
		"\x10C\a,\x2\x2\x10C\x10D\a\x31\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\b"+
		"-\x2\x2\x10FZ\x3\x2\x2\x2\n\x2\xDD\xE3\xE9\xEB\xF3\xFD\x108\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace GpLambda.Compiler.Grammar
